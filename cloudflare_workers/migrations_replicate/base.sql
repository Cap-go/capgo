DROP TABLE IF EXISTS app_versions;

DROP TABLE IF EXISTS channels;

DROP TABLE IF EXISTS channel_devices;

DROP TABLE IF EXISTS apps;

DROP TABLE IF EXISTS orgs;

DROP TABLE IF EXISTS stripe_info;

-- Create app_versions table
--   id bigint generated by default as identity not null,
--   created_at timestamp with time zone null default now(),
--   app_id character varying not null,
--   name character varying not null,
--   updated_at timestamp with time zone null default now(),
--   deleted boolean not null default false,
--   external_url character varying null,
--   checksum character varying null,
--   session_key character varying null,
--   storage_provider text not null default 'r2'::text,
--   min_update_version character varying null,
--   native_packages jsonb[] null,
--   owner_org uuid not null,
--   user_id uuid null,
--   r2_path character varying null,
--   manifest manifest_entry[] null,
-- above it's pgtable for app_versions under it's sqlite version
CREATE TABLE IF NOT EXISTS app_versions (
    id INTEGER PRIMARY KEY,
    owner_org TEXT,
    app_id TEXT,
    name TEXT,
    r2_path TEXT,
    user_id TEXT,
    deleted BOOLEAN,
    external_url TEXT,
    checksum TEXT,
    session_key TEXT,
    storage_provider TEXT,
    min_update_version TEXT
);

CREATE INDEX IF NOT EXISTS idx_app_versions_app_id_name_cover ON app_versions (app_id, name, id, owner_org);

CREATE INDEX IF NOT EXISTS idx_app_versions_id ON app_versions (id);

CREATE INDEX IF NOT EXISTS idx_app_versions_name ON app_versions (name);

CREATE INDEX IF NOT EXISTS idx_app_versions_app_id ON app_versions (app_id);

CREATE INDEX IF NOT EXISTS idx_app_versions_owner_org ON app_versions (owner_org);

CREATE INDEX IF NOT EXISTS idx_app_versions_r2_path ON app_versions (r2_path);

CREATE INDEX IF NOT EXISTS idx_app_versions_external_url ON app_versions (external_url);

-- Create manifest table for storing manifest entries with file size
CREATE TABLE IF NOT EXISTS manifest (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    app_version_id INTEGER NOT NULL,
    file_name TEXT NOT NULL,
    s3_path TEXT NOT NULL,
    file_hash TEXT NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_manifest_app_version_id ON manifest (app_version_id);

--   id bigint generated by default as identity not null,
--   created_at timestamp with time zone not null default now(),
--   name character varying not null,
--   app_id character varying not null,
--   version bigint not null,
--   updated_at timestamp with time zone not null default now(),
--   public boolean not null default false,
--   disable_auto_update_under_native boolean not null default true,
--   ios boolean not null default true,
--   android boolean not null default true,
--   allow_device_self_set boolean not null default false,
--   allow_emulator boolean not null default true,
--   allow_dev boolean not null default true,
--   disable_auto_update public.disable_update not null default 'major'::disable_update,
--   owner_org uuid not null,
--   created_by uuid null,
-- Create channels table
CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY,
    name TEXT,
    app_id TEXT,
    version INTEGER,
    created_by TEXT,
    owner_org TEXT,
    public BOOLEAN,
    disable_auto_update_under_native BOOLEAN,
    disable_auto_update TEXT,
    ios BOOLEAN,
    android BOOLEAN,
    allow_device_self_set BOOLEAN,
    allow_emulator BOOLEAN,
    allow_dev BOOLEAN
);

CREATE INDEX IF NOT EXISTS idx_channels_id ON channels (id);

CREATE INDEX IF NOT EXISTS idx_channels_app_id_public_android_ios ON channels (app_id, public, android, ios);

CREATE INDEX IF NOT EXISTS idx_channels_app_id_name ON channels (app_id, name);

CREATE INDEX IF NOT EXISTS idx_channels_version ON channels (version);

CREATE INDEX IF NOT EXISTS idx_channels_owner_org ON channels (owner_org);

--   created_at timestamp with time zone null default now(),
--   channel_id bigint not null,
--   app_id character varying not null,
--   updated_at timestamp with time zone not null default now(),
--   device_id text not null,
--   id bigint generated by default as identity not null,
--   owner_org uuid not null,
-- Create channel_devices table
CREATE TABLE IF NOT EXISTS channel_devices (
    id INTEGER PRIMARY KEY,
    channel_id INTEGER,
    app_id TEXT,
    device_id TEXT,
    owner_org TEXT
);

CREATE INDEX IF NOT EXISTS idx_channel_devices_id ON channel_devices (id);

CREATE INDEX IF NOT EXISTS idx_channel_devices_device_id_app_id ON channel_devices (device_id, app_id);

CREATE INDEX IF NOT EXISTS idx_channel_devices_channel_id ON channel_devices (channel_id);

--   created_at timestamp with time zone null default now(),
--   app_id character varying not null,
--   icon_url character varying not null,
--   user_id uuid null,
--   name character varying null,
--   last_version character varying null,
--   updated_at timestamp with time zone null,
--   id uuid null default extensions.uuid_generate_v4 (),
--   retention bigint not null default '2592000'::bigint,
--   owner_org uuid not null,
--   default_upload_channel character varying not null default 'dev'::character varying,
--   transfer_history jsonb[] null default '{}'::jsonb[],
-- Create apps table
CREATE TABLE IF NOT EXISTS apps (
    id TEXT PRIMARY KEY,
    app_id TEXT,
    icon_url TEXT,
    user_id TEXT,
    name TEXT,
    last_version TEXT,
    retention INTEGER,
    owner_org TEXT,
    default_upload_channel TEXT,
    transfer_history TEXT
);

CREATE INDEX IF NOT EXISTS idx_apps_id ON apps (id);

CREATE INDEX IF NOT EXISTS idx_apps_app_id ON apps (app_id);

CREATE INDEX IF NOT EXISTS idx_apps_owner_org ON apps (owner_org);

CREATE INDEX IF NOT EXISTS idx_apps_user_id ON apps (user_id);

--   id uuid not null default gen_random_uuid (),
--   created_by uuid not null,
--   created_at timestamp with time zone null default now(),
--   updated_at timestamp with time zone null default now(),
--   logo text null,
--   name text not null,
--   management_email text not null,
--   customer_id character varying null,
-- Create orgs table
CREATE TABLE IF NOT EXISTS orgs (
    id TEXT PRIMARY KEY,
    created_by TEXT,
    logo TEXT,
    name TEXT,
    management_email TEXT,
    customer_id TEXT
);

CREATE INDEX IF NOT EXISTS idx_orgs_id ON orgs (id);

CREATE INDEX IF NOT EXISTS idx_orgs_created_by ON orgs (created_by);

CREATE INDEX IF NOT EXISTS idx_orgs_customer_id ON orgs (customer_id);

CREATE TABLE IF NOT EXISTS stripe_info (
    id PRIMARY KEY,
    customer_id TEXT,
    status TEXT,
    trial_at TEXT,
    is_good_plan BOOLEAN,
    mau_exceeded BOOLEAN,
    storage_exceeded BOOLEAN,
    bandwidth_exceeded BOOLEAN
);

CREATE INDEX IF NOT EXISTS idx_stripe_info_customer_id ON stripe_info (customer_id);

CREATE INDEX IF NOT EXISTS idx_stripe_info_status_is_good_plan ON stripe_info (status, is_good_plan);

CREATE INDEX IF NOT EXISTS idx_stripe_info_trial_at ON stripe_info (trial_at);

CREATE INDEX IF NOT EXISTS idx_stripe_info_exceeded ON stripe_info (
    mau_exceeded,
    storage_exceeded,
    bandwidth_exceeded
);

-- Create table to store counts of all tables
CREATE TABLE IF NOT EXISTS table_counts (
    table_name TEXT PRIMARY KEY,
    record_count INTEGER NOT NULL DEFAULT 0,
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Single trigger function to handle all table count updates
CREATE TRIGGER IF NOT EXISTS update_table_count_on_change
AFTER INSERT ON table_counts
BEGIN
UPDATE table_counts
SET
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = NEW.table_name;

END;

-- Simple triggers for each table using a generic approach
CREATE TRIGGER IF NOT EXISTS app_versions_count_insert
AFTER INSERT ON app_versions
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'app_versions';

END;

CREATE TRIGGER IF NOT EXISTS app_versions_count_delete
AFTER DELETE ON app_versions
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'app_versions';

END;

CREATE TRIGGER IF NOT EXISTS manifest_count_insert
AFTER INSERT ON manifest
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'manifest';

END;

CREATE TRIGGER IF NOT EXISTS manifest_count_delete
AFTER DELETE ON manifest
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'manifest';

END;

CREATE TRIGGER IF NOT EXISTS channels_count_insert
AFTER INSERT ON channels
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'channels';

END;

CREATE TRIGGER IF NOT EXISTS channels_count_delete
AFTER DELETE ON channels
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'channels';

END;

CREATE TRIGGER IF NOT EXISTS channel_devices_count_insert
AFTER INSERT ON channel_devices
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'channel_devices';

END;

CREATE TRIGGER IF NOT EXISTS channel_devices_count_delete
AFTER DELETE ON channel_devices
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'channel_devices';

END;

CREATE TRIGGER IF NOT EXISTS apps_count_insert
AFTER INSERT ON apps
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'apps';

END;

CREATE TRIGGER IF NOT EXISTS apps_count_delete
AFTER DELETE ON apps
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'apps';

END;

CREATE TRIGGER IF NOT EXISTS orgs_count_insert
AFTER INSERT ON orgs
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'orgs';

END;

CREATE TRIGGER IF NOT EXISTS orgs_count_delete
AFTER DELETE ON orgs
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'orgs';

END;

CREATE TRIGGER IF NOT EXISTS stripe_info_count_insert
AFTER INSERT ON stripe_info
BEGIN
UPDATE table_counts
SET
    record_count = record_count + 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'stripe_info';

END;

CREATE TRIGGER IF NOT EXISTS stripe_info_count_delete
AFTER DELETE ON stripe_info
BEGIN
UPDATE table_counts
SET
    record_count = record_count - 1,
    last_updated = CURRENT_TIMESTAMP
WHERE
    table_name = 'stripe_info';

END;

-- Index for better performance
CREATE INDEX IF NOT EXISTS idx_table_counts_record_count ON table_counts (table_name);

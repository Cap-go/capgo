name: Build source code and send to Capgo

on:
  push:
    tags:
      - '*'
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    name: "Build code and release"
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Lint
        id: lint_code
        run: pnpm lint
      - name: Build
        id: build_code
        run: pnpm mobile
        env:
          VITE_APP_URL: ${{ secrets.VITE_APP_URL }}
          VITE_VAPID_KEY: ${{ secrets.VITE_VAPID_KEY }}
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG }}
      - name: Configure Homebrew cache
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew/supabase--*
            ~/Library/Caches/Homebrew/downloads/*--supabase-*
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/brew-formulae') }}
          restore-keys: ${{ runner.os }}-brew-
      - name: Install Supabase CLI Homebrew dependencies
        run: |
          env HOMEBREW_NO_AUTO_UPDATE=1 brew install supabase/tap/supabase
      - name: Update functions Alpha
        if: "contains(github.ref, '-alpha.')"
        id: update_functions_preprod
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
          BRANCH: development
        run: node scripts/deploy_functions.mjs  
      - name: Update functions
        if: "!contains(github.ref, '-alpha.')"
        id: update_functions_prod
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
        run: node scripts/deploy_functions.mjs 
      - name: Create Release Alpha
        if: "contains(github.ref, '-alpha.')"
        id: create_release_prepro
        run: npx @capgo/cli@latest upload -a ${{ secrets.CAPGO_TOKEN }} -c alpha
      - name: Create Release Production
        if: "!contains(github.ref, '-alpha.')"
        id: create_release_prod
        run: npx @capgo/cli@latest upload -a ${{ secrets.CAPGO_TOKEN }} -c production
  build_android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Setup java
        uses: actions/setup-java@v3
        with:
            distribution: 'zulu'
            java-version: '11'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Build
        id: build_code
        run: pnpm mobile
      - name: Build app bundle
        run: cd android && gradle bundle
      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks
      - name: Sign dev build
        run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release
      - name: Upload release bundle
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: android/app/build/outputs/bundle/release/app-release-signed.aab
          retention-days: 60
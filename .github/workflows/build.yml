name: Build source code and send to Capgo

on:
  push:
    tags:
      - '*'
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: "Build code and release"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup bun
        uses: oven-sh/setup-bun@v1.1.1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Lint
        id: lint_code
        run: bun lint && bun lint-backend
      - name: Build PROD
        id: build_code
        if: ${{ !contains(github.ref, '-alpha.') }}
        run: bun mobile
        env:
          VITE_VAPID_KEY: ${{ secrets.VITE_VAPID_KEY }}
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG }}
      - name: Build ALPHA
        id: build_code_alpha
        if: ${{ contains(github.ref, '-alpha.') }}
        run: bun dev-mobile
        env:
          VITE_VAPID_KEY: ${{ secrets.VITE_VAPID_KEY }}
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG }}
      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 1.178.2
      - name: Set env PROD
        if: ${{ !contains(github.ref, '-alpha.') }}
        run: echo "SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_DB_PASS }}" >> $GITHUB_ENV
      - name: Set env ALPHA
        if: ${{ contains(github.ref, '-alpha.') }}
        run: echo "SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_DB_PASS_ALPHA }}" >> $GITHUB_ENV      
      - name: üçú Prepare Supabase PROD
        run: supabase link --project-ref xvwzpoazmxkqosrdewyv
        if: ${{ !contains(github.ref, '-alpha.') }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
      - name: üçú Prepare Supabase ALPHA
        run: supabase link --project-ref aucsybvnhavogdmzwtcw
        if: ${{ contains(github.ref, '-alpha.') }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
      # - name: üö® Seed Supabase ALPHA
      #   if: ${{ contains(github.ref, '-alpha.') }}
      #   run: supabase db reset --linked
      - name: ü¶§ Apply Supabase Migrations
        run: supabase db push --include-all
      - name: üÜô Update functions
        id: update_functions_prod
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
        run: supabase functions deploy
      - name: Deploy CF Worker
        run: bunx wrangler@latest deploy --name capgo_api
        if: ${{ !contains(github.ref, '-alpha.') }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Deploy CF Worker ALPHA
        run: bunx wrangler@latest deploy --name capgo_api-alpha
        if: ${{ contains(github.ref, '-alpha.') }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Publish CF webapp PROD
        if: ${{ !contains(github.ref, '-alpha.') }}
        run: bunx wrangler@latest pages deploy dist --project-name capgo-webapp --branch main
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Publish CF webapp ALPHA
        if: ${{ contains(github.ref, '-alpha.') }}
        run: bunx wrangler@latest pages deploy dist --project-name capgo-webapp-alpha --branch main
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Create Release ALPHA
        if: ${{ contains(github.ref, '-alpha.') }}
        id: create_release_alpha
        run: bun x @capgo/cli@latest bundle upload -a ${{ secrets.CAPGO_TOKEN }} -c alpha
      - name: Create Release PROD
        if: ${{ !contains(github.ref, '-alpha.') }}
        id: create_release_prod
        run: bun x @capgo/cli@latest bundle upload -a ${{ secrets.CAPGO_TOKEN }} -c production

      - name: Create Sourcemap Sentry
        run: bun run cf-build
      - name: Create Sentry ALPHA
        if: ${{ contains(github.ref, '-alpha.') }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: staging
          sourcemaps: dist_cf
          version: ${{ github.ref }}

      - name: Create Sentry release PROD
        if: ${{ !contains(github.ref, '-alpha.') }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          sourcemaps: dist_cf
          version: ${{ github.ref }}

  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup bun
        uses: oven-sh/setup-bun@v1.1.1
        with:
          bun-version: latest
      - name: Install dependencies
        id: install_code
        run: bun install
      - name: Build
        id: build_code
        run: bun mobile
      - name: Sync
        id: sync_code
        run: bun x cap sync android
      - name: Setup java
        uses: actions/setup-java@v4
        with:
            distribution: 'zulu'
            java-version: '17'
      - name: Decode Keystore File
        uses: timheuer/base64-to-file@v1
        id: android_keystore
        with:
          fileName: "android_keystore.keystore"
          encodedString: ${{ secrets.ANDROID_KEYSTORE_FILE }}
      - name: Decode Google Play Confi File
        uses: timheuer/base64-to-file@v1
        id: service_account_json_file
        with:
          fileName: "serviceAccount.json"
          encodedString: ${{ secrets.PLAY_CONFIG_JSON }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
      - uses: maierj/fastlane-action@v3.1.0
        env:
          KEYSTORE_PATH: ${{ steps.android_keystore.outputs.filePath }}
          ANDROID_JSON_KEY_FILE: ${{ steps.service_account_json_file.outputs.filePath }}
          DEVELOPER_PACKAGE_NAME: ${{ secrets.DEVELOPER_PACKAGE_NAME }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        with:
          lane: android beta
      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: ./android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 10
  build_ios:
      runs-on: macos-latest
      steps:
        - uses: actions/checkout@v4
        - name: Setup bun
          uses: oven-sh/setup-bun@v1.1.1
          with:
            bun-version: latest
        - name: Install dependencies
          id: install_code
          run: bun install
        - name: Build
          id: build_code
          run: bun mobile
        - name: Sync
          id: sync_code
          run: bun x cap sync ios
        - uses: ruby/setup-ruby@v1
          with:
            ruby-version: '3.0'
            bundler-cache: true
        - uses: maierj/fastlane-action@v3.1.0
          env:
            APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
            BUNDLE_IDENTIFIER: ${{ secrets.BUNDLE_IDENTIFIER }}
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          with:
            lane: ios beta
        - name: Upload release bundle
          uses: actions/upload-artifact@v4
          with:
            name: ios-release
            path: ./App.ipa
            retention-days: 10

name: Build source code and deploy

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - "*"

#  Break deploy as we have bug in files upload CF worker
jobs:
  supabase_deploy:
    runs-on: ubuntu-latest
    name: Build code and deploy to Supabase
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "SUPA_ENV=ALPHA" >> $GITHUB_ENV
          else
            echo "SUPA_ENV=PROD" >> $GITHUB_ENV
          fi
      - name: Set Supabase credentials
        run: |
          echo "SUPABASE_DB_PASSWORD=${{ secrets[format('SUPABASE_DB_PASS_{0}', env.SUPA_ENV)] }}" >> $GITHUB_ENV
          echo "SUPABASE_PROJECT_ID=${{ secrets[format('SUPABASE_PROJECT_ID_{0}', env.SUPA_ENV)] }}" >> $GITHUB_ENV
      - name: Install dependencies
        run: bun install
      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Show Supabase CLI version
        run: supabase --version
      - name: Prepare Supabase
        run: supabase link --project-ref ${{ env.SUPABASE_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
      - name: Wait for tests to succeed
        if: ${{ env.SUPA_ENV != 'ALPHA' }}
        uses: lewagon/wait-on-check-action@v1.4.1
        with:
          ref: ${{ github.ref }}
          check-name: Run tests
          repo-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          wait-interval: 10
      - name: Apply Supabase Migrations
        run: supabase db push
      - name: Update functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
        run: supabase functions deploy

  deploy_webapp:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "CHANNEL=dev" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
            echo "CHANNEL=production" >> $GITHUB_ENV
          fi
      - name: Build
        run: bun ${{ env.ENV == 'prod' && 'build:mobile' || 'build:dev:mobile' }}
        env:
          VITE_VAPID_KEY: ${{ secrets.VITE_VAPID_KEY }}
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG }}
      - name: Generate AI changelog
        id: changelog
        uses: mistricky/ccc@v0.2.2
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Publish CF webapp
        run: bun run deploy:cloudflare:webapp:${{ env.ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Deploy to Capgo
        run: bunx @capgo/cli@latest bundle upload -a ${{ secrets.CAPGO_TOKEN }} --channel ${{ env.CHANNEL }}  --partial --tus
        env:
          CAPGO_TOKEN: ${{ secrets.CAPGO_TOKEN }}
      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ## ðŸ†• Changelog

            ${{ steps.changelog.outputs.result }}

            ---

            ðŸ”— **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.from_tag }}...${{ steps.changelog.outputs.to_tag }}
          make_latest: true
          token: "${{ secrets.PERSONAL_ACCESS_TOKEN }}"
          prerelease: ${{ contains(github.ref, '-alpha.') }}

  deploy_api:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
          fi
      - name: Deploy CF Worker API
        run: bun run deploy:cloudflare:api:${{ env.ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  deploy_files:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
          fi
      - name: Deploy CF Worker Files
        run: bun run deploy:cloudflare:files:${{ env.ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy_plugin:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
          fi
      - name: Deploy CF Worker Plugin
        run: bun run deploy:cloudflare:plugin:${{ env.ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy_plugin_v2:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
          fi
      - name: Deploy CF Worker Plugin V2
        run: bun run deploy:cloudflare:plugin_v2:${{ env.ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy_plugin_v1:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Set environment variable
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
          fi
      - name: Deploy CF Worker Plugin V1
        run: bun run deploy:cloudflare:plugin_v1:${{ env.ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy_plugin_fc3:
    needs: supabase_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Resolve deployment environment
        run: |
          if [[ ${{ github.ref }} == *-alpha* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "FC_REGION=${{ secrets.ALICLOUD_FC_REGION_DEV }}" >> $GITHUB_ENV
            echo "FC_SERVICE_NAME=${{ secrets.ALICLOUD_FC_SERVICE_DEV }}" >> $GITHUB_ENV
            echo "FC_FUNCTION_NAME=${{ secrets.ALICLOUD_FC_FUNCTION_DEV }}" >> $GITHUB_ENV
            echo "SENTRY_DSN=${{ secrets.ALICLOUD_SENTRY_DSN_DEV }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ secrets.SUPABASE_URL_DEV }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY_DEV }}" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
            echo "FC_REGION=${{ secrets.ALICLOUD_FC_REGION_PROD }}" >> $GITHUB_ENV
            echo "FC_SERVICE_NAME=${{ secrets.ALICLOUD_FC_SERVICE_PROD }}" >> $GITHUB_ENV
            echo "FC_FUNCTION_NAME=${{ secrets.ALICLOUD_FC_FUNCTION_PROD }}" >> $GITHUB_ENV
            echo "SENTRY_DSN=${{ secrets.ALICLOUD_SENTRY_DSN_PROD }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
          fi
      - name: Build Alibaba FC bundle
        run: bunx esbuild alicloud/plugin/index.ts --bundle --platform=node --target=node22 --format=esm --outfile=dist/plugin-fc/index.js
      - name: Prepare function package metadata
        run: |
          mkdir -p dist/plugin-fc
          cat <<'EOF' > dist/plugin-fc/package.json
          {
            "type": "module"
          }
          EOF
      - name: Setup Serverless Devs CLI
        uses: Serverless-Devs/setup-s@v1
      - name: Configure Alibaba credentials
        run: |
          mkdir -p ~/.s
          cat <<'EOF' > ~/.s/access.yaml
          fc-ci:
            AccountID: ${{ secrets.ALIBABA_ACCOUNT_ID }}
            AccessKeyID: ${{ secrets.ALIBABA_ACCESS_KEY_ID }}
            AccessKeySecret: ${{ secrets.ALIBABA_ACCESS_KEY_SECRET }}
          EOF
      - name: Deploy plugin to Alibaba FC 3.0
        env:
          FC_REGION: ${{ env.FC_REGION }}
          FC_SERVICE_NAME: ${{ env.FC_SERVICE_NAME }}
          FC_FUNCTION_NAME: ${{ env.FC_FUNCTION_NAME }}
          SENTRY_DSN: ${{ env.SENTRY_DSN }}
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}
        run: s deploy --config alicloud/plugin/s.yaml --access fc-ci --use-local
      - name: Cleanup credentials
        if: always()
        run: rm -rf ~/.s

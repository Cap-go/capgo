require 'json'

default_platform(:ios)

KEYSTORE_PATH = ENV["KEYSTORE_PATH"]
KEYSTORE_KEY_ALIAS = ENV["KEYSTORE_KEY_ALIAS"]
KEYSTORE_KEY_PASSWORD = ENV["KEYSTORE_KEY_PASSWORD"]
KEYSTORE_STORE_PASSWORD = ENV["KEYSTORE_STORE_PASSWORD"]
ANDROID_JSON_KEY_FILE = ENV['ANDROID_JSON_KEY_FILE']

platform :ios do
  desc 'Export ipa and submit to TestFlight'
  lane :beta do
  keychain_name = 'ios-build.keychain'
  setup_signing
  build_app_with_signing
  submit_to_testflight
  cleanup_keychain(keychain_name: keychain_name)
  end

  private_lane :setup_signing do
    keychain_password = SecureRandom.uuid
    keychain_name = 'ios-build.keychain'

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 21600 # 6 hours
    )

    import_cert(
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
    install_profile
    update_project_settings
  end

  private_lane :import_cert do |options|
    cert_path = "#{Dir.tmpdir}/build_certificate.p12"
    File.write(cert_path, Base64.decode64(ENV['BUILD_CERTIFICATE_BASE64']))
  
    keychain_password = options[:keychain_password]
    keychain_name = options[:keychain_name]
  
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
  
    import_certificate(
      certificate_path: cert_path,
      certificate_password: ENV['P12_PASSWORD'],
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      log_output: true
    )
  
    File.delete(cert_path) # Clean up the temporary file
  end
  
  private_lane :cleanup_keychain do |options|
    delete_keychain(
      name: options[:keychain_name]
    ) if File.exist? File.expand_path("~/Library/Keychains/#{options[:keychain_name]}-db")
  end  

  private_lane :install_profile do
    profile_path = "#{Dir.home}/Library/MobileDevice/Provisioning Profiles/build_pp.mobileprovision"
    File.write(profile_path, Base64.decode64(ENV['BUILD_PROVISION_PROFILE_BASE64']))
    ENV['PROVISIONING_PROFILE_PATH'] = profile_path
    
    UI.message("Provisioning profile installed at: #{profile_path}")
    UI.message("Provisioning profile decoded content:")
    UI.message(`security cms -D -i "#{profile_path}"`)
    
    UI.message("\nProvisioning profile raw content (readable strings):")
    UI.message(`cat "#{profile_path}" | strings`)
    
    install_provisioning_profile(path: profile_path)
  end

  private_lane :verify_team_id do
    project = Xcodeproj::Project.open("./ios/App/App.xcodeproj")
    main_target = project.targets.find { |t| t.name == "App" }
    build_configuration = main_target.build_configurations.first
    team_id = build_configuration.build_settings['DEVELOPMENT_TEAM']
    UI.user_error!("Team ID in project (#{team_id}) doesn't match expected team ID (#{ENV['TEAM_ID']})") unless team_id == ENV['TEAM_ID']
  end  

  private_lane :update_project_settings do
    # profile_name = File.basename(ENV['PROVISIONING_PROFILE_PATH'], '.mobileprovision')
    profile_name = "Github action"
    UI.message("Using profile name: #{profile_name}")
    UI.message("Using team ID: #{ENV['TEAM_ID']}")
    UI.message("Using bundle identifier: #{ENV['BUNDLE_IDENTIFIER']}")
  
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./ios/App/App.xcodeproj",
      code_sign_identity: "iPhone Distribution",
      profile_name: profile_name,
      bundle_identifier: ENV['BUNDLE_IDENTIFIER'],
      team_id: ENV['APP_STORE_CONNECT_TEAM_ID']
    )
  
    update_project_team(
      path: "./ios/App/App.xcodeproj",
      teamid: ENV['APP_STORE_CONNECT_TEAM_ID']
    )
  end

  private_lane :build_app_with_signing do
    # profile_name = File.basename(ENV['PROVISIONING_PROFILE_PATH'], '.mobileprovision')
    profile_name = "Github action"
    build_app(
      workspace: "./ios/App/App.xcworkspace",
      scheme: "App",
      configuration: "Release",
      export_method: "app-store",
      output_name: "App.ipa",
      export_options: {
        provisioningProfiles: {
          ENV['BUNDLE_IDENTIFIER'] => profile_name
        }
      },
      xcargs: "-verbose",
      buildlog_path: "./build_logs",
      export_xcargs: "-allowProvisioningUpdates"
    )
  end  

  private_lane :submit_to_testflight do
    pilot(
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./App.ipa"
    )
  end
end



platform :android do
    desc "Deploy a beta version to the Google Play"
    private_lane :verify_changelog_exists do |version_code: |
      changelog_path = "android/metadata/en-US/changelogs/#{version_code}.txt"
      UI.user_error!("Missing changelog file at #{changelog_path}") unless File.exist?(changelog_path)
      UI.message("Changelog exists for version code #{version_code}")
    end
  
    private_lane :verify_upload_to_staging do |version_name: |
      UI.message "Skipping staging verification step"
      # require 'open-uri'
      # staging_version = nil
      # begin
      #   versions = JSON.parse(open(URI.join(STAGING_API_URL, "/--/api/v2/versions")).read)
      #   latest_major_version = versions['sdkVersions'].keys.map(&:to_i).sort().reverse().first()
      #   latest_version = versions['sdkVersions']["#{latest_major_version}.0.0"]
      #   staging_version = latest_version['androidClientVersion']
      # rescue StandardError => e
      #   UI.user_error!("Unable to validate androidClientVersion for latest SDK version on versions endpoint: #{e.inspect}. If this issue persists, remove the verify_upload_to_staging step from Fastfile and manually verify that the Android client has been deployed and tested on staging.")
      # end
  
      # unless staging_version == version_name
      #   UI.user_error!("APK version #{version_name} is not yet uploaded to staging. Please download from the client_android CI job, test and upload manually.")
      # end
      # UI.message "APK version #{version_name} has been uploaded to staging"
    end
    lane :beta do
        gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })
        upload_to_play_store(
          json_key: ANDROID_JSON_KEY_FILE,
          track: 'beta',
          skip_upload_metadata: true,
          skip_upload_changelogs: true,
          skip_upload_images: true,
          skip_upload_screenshots: true,
        )
    end
    lane :build do
      gradle(
        task: "clean bundleRelease",
        project_dir: 'android/',
        print_command: false,
        properties: {
          "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
          "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
          "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
          "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
        })
    end
    lane :prod_release do
      build_gradle = File.read("../android/app/build.gradle")

      verify_changelog_exists(version_code: build_gradle.match(/versionCode (\d+)/)[1])
      verify_upload_to_staging(version_name: build_gradle.match(/versionName '([\d\.]+)'/)[1])
  
      supply(
        track_promote_to: 'beta',
        skip_upload_apk: true,
        skip_upload_aab: true,
        skip_upload_metadata: false,
        skip_upload_changelogs: false,
        skip_upload_images: false,
        skip_upload_screenshots: false
      )
    end
end


-- Create table to track deleted apps for billing
CREATE TABLE IF NOT EXISTS "public"."deleted_apps" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT now(),
    "app_id" character varying NOT NULL,
    "owner_org" uuid NOT NULL,
    "deleted_at" timestamp with time zone DEFAULT now()
);

-- Add indexes for deleted_apps
CREATE INDEX IF NOT EXISTS idx_deleted_apps_app_id ON "public"."deleted_apps" (app_id);
CREATE INDEX IF NOT EXISTS idx_deleted_apps_owner_org ON "public"."deleted_apps" (owner_org);
CREATE INDEX IF NOT EXISTS idx_deleted_apps_deleted_at ON "public"."deleted_apps" (deleted_at);

-- Create trigger for app deletion
DROP TRIGGER IF EXISTS "on_app_delete" ON "public"."apps";
CREATE TRIGGER "on_app_delete"
  AFTER DELETE ON "public"."apps"
  FOR EACH ROW
  EXECUTE FUNCTION "public"."trigger_http_queue_post_to_function"('on_app_delete');

-- Create queue for app deletion
SELECT pgmq.create('on_app_delete');

SELECT cron.schedule(
    'process_app_delete_queue',
    '5 seconds',
    $$SELECT process_function_queue('on_app_delete');$$
);

-- Create function to get metrics including deleted apps
CREATE OR REPLACE FUNCTION "public"."get_app_metrics"(
    p_org_id uuid,
    p_start_date timestamp with time zone,
    p_end_date timestamp with time zone
)
RETURNS TABLE (
    mau bigint,
    bandwidth bigint,
    storage bigint,
    deleted_apps bigint
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    WITH active_metrics AS (
        SELECT
            COUNT(DISTINCT device_id) as mau,
            COALESCE(SUM(file_size), 0) as bandwidth,
            COALESCE(SUM(file_size), 0) as storage
        FROM device_usage
        WHERE app_id IN (
            SELECT app_id 
            FROM apps 
            WHERE owner_org = p_org_id
        )
        AND timestamp BETWEEN p_start_date AND p_end_date
    ),
    deleted_metrics AS (
        SELECT COUNT(*) as deleted_count
        FROM deleted_apps
        WHERE owner_org = p_org_id
        AND deleted_at BETWEEN p_start_date AND p_end_date
    )
    SELECT 
        COALESCE(am.mau, 0),
        COALESCE(am.bandwidth, 0),
        COALESCE(am.storage, 0),
        COALESCE(dm.deleted_count, 0)
    FROM active_metrics am
    CROSS JOIN deleted_metrics dm;
END;
$$;

-- Add link and comment fields to app_versions table
ALTER TABLE app_versions 
ADD COLUMN IF NOT EXISTS link text,
ADD COLUMN IF NOT EXISTS comment text;

-- Create deploy_history table with indexes for performance
CREATE TABLE IF NOT EXISTS deploy_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  version_id BIGINT NOT NULL REFERENCES app_versions(id) ON DELETE CASCADE,
  app_id TEXT NOT NULL REFERENCES apps(app_id) ON DELETE CASCADE,
  channel_id BIGINT NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
  deployed_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  link TEXT,
  comment TEXT,
  is_current BOOLEAN DEFAULT TRUE,
  owner_org TEXT NOT NULL REFERENCES orgs(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Add indexes for improved query performance
CREATE INDEX IF NOT EXISTS deploy_history_app_id_idx ON deploy_history(app_id);
CREATE INDEX IF NOT EXISTS deploy_history_channel_id_idx ON deploy_history(channel_id);
CREATE INDEX IF NOT EXISTS deploy_history_version_id_idx ON deploy_history(version_id);
CREATE INDEX IF NOT EXISTS deploy_history_is_current_idx ON deploy_history(is_current);
CREATE INDEX IF NOT EXISTS deploy_history_deployed_at_idx ON deploy_history(deployed_at);

-- Create trigger function to record deployment history
CREATE OR REPLACE FUNCTION record_deployment_history()
RETURNS TRIGGER AS $$
BEGIN
  -- Only update records with is_current=TRUE to improve performance
  UPDATE deploy_history
  SET is_current = FALSE
  WHERE channel_id = NEW.id 
    AND app_id = NEW.app_id 
    AND is_current = TRUE;
  
  -- Insert new record
  INSERT INTO deploy_history (
    version_id,
    app_id,
    channel_id,
    owner_org,
    link,
    comment
  )
  SELECT
    NEW.version,
    NEW.app_id,
    NEW.id,
    NEW.owner_org,
    v.link,
    v.comment
  FROM app_versions v
  WHERE v.id = NEW.version;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to record deployment history when channel version changes
DROP TRIGGER IF EXISTS record_channel_deployment_history ON channels;
CREATE TRIGGER record_channel_deployment_history
AFTER UPDATE OF version ON channels
FOR EACH ROW
WHEN (OLD.version IS DISTINCT FROM NEW.version)
EXECUTE FUNCTION record_deployment_history();

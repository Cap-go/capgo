-- Create deploy_history table
CREATE TABLE IF NOT EXISTS "public"."deploy_history" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "created_at" timestamp with time zone DEFAULT NOW(),
    "updated_at" timestamp with time zone DEFAULT NOW(),
    "channel_id" bigint NOT NULL REFERENCES channels(id),
    "app_id" character varying NOT NULL,
    "version_id" bigint NOT NULL REFERENCES app_versions(id),
    "deployed_at" timestamp with time zone DEFAULT NOW(),
    "created_by" uuid NOT NULL REFERENCES public.users(id),
    "owner_org" uuid NOT NULL
);

-- Add RLS policies
ALTER TABLE "public"."deploy_history" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow users to view deploy history for their org" ON "public"."deploy_history"
FOR SELECT
USING (
    auth.uid() IN (
        SELECT user_id FROM org_users WHERE org_id = owner_org
    )
);

CREATE POLICY "Allow users with write permissions to insert deploy history" ON "public"."deploy_history"
FOR INSERT
WITH CHECK (
    auth.uid() IN (
        SELECT user_id FROM org_users 
        WHERE org_id = owner_org 
        AND (user_right = 'write' OR user_right = 'admin' OR user_right = 'super_admin')
    )
    OR
    -- Allow apikey insertions
    (is_allowed_capgkey(get_apikey(), '{all}', app_id))
);

CREATE POLICY "Allow users with write permissions to update deploy history" ON "public"."deploy_history"
FOR UPDATE
USING (
    auth.uid() IN (
        SELECT user_id FROM org_users 
        WHERE org_id = owner_org 
        AND (user_right = 'write' OR user_right = 'admin' OR user_right = 'super_admin')
    )
)
WITH CHECK (
    auth.uid() IN (
        SELECT user_id FROM org_users 
        WHERE org_id = owner_org 
        AND (user_right = 'write' OR user_right = 'admin' OR user_right = 'super_admin')
    )
);

-- Initialize deploy_history with current versions for existing channels
INSERT INTO public.deploy_history (
    channel_id,
    app_id,
    version_id,
    owner_org,
    deployed_at,
    created_by
)
SELECT 
    c.id,
    c.app_id,
    c.version,
    c.owner_org,
    c.updated_at,
    coalesce(c.created_by, get_identity())
FROM 
    public.channels c
WHERE 
    c.version IS NOT NULL
ON CONFLICT DO NOTHING;

-- Create function to record deployment history
CREATE OR REPLACE FUNCTION public.record_deployment_history()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $function$
BEGIN
    -- If version is changing, record the deployment
    IF OLD.version <> NEW.version THEN
        -- Insert new record
        INSERT INTO deploy_history (
            channel_id, 
            app_id, 
            version_id, 
            owner_org,
            created_by
        )
        VALUES (
            NEW.id,
            NEW.app_id,
            NEW.version,
            NEW.owner_org,
            get_identity()
        );
    END IF;
    
    RETURN NEW;
END;
$function$;

-- Create trigger to record deployment history when channel version changes
DROP TRIGGER IF EXISTS record_deployment_history_trigger ON channels;
CREATE TRIGGER record_deployment_history_trigger
AFTER UPDATE OF version ON channels
FOR EACH ROW
EXECUTE FUNCTION record_deployment_history();
